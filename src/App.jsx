import React,{useMemo,useRef,useState,useEffect,useDeferredValue}from"react";
import*as XLSX from"xlsx";
import{Card,CardContent,CardHeader,CardTitle}from"@/components/ui/card";
import{Button}from"@/components/ui/button";
import{Input}from"@/components/ui/input";
import{Tabs,TabsList,TabsTrigger,TabsContent}from"@/components/ui/tabs";
import{Label}from"@/components/ui/label";
import{Checkbox}from"@/components/ui/checkbox";
import{ScrollArea}from"@/components/ui/scroll-area";
import{Separator}from"@/components/ui/separator";
import{Download,Upload,Filter,RefreshCw,ChevronUp,ChevronDown,List,Search,Plus,Minus}from"lucide-react";
import{Dialog,DialogTrigger,DialogContent,DialogHeader,DialogTitle}from"@/components/ui/dialog";
import{ResponsiveContainer,BarChart,Bar,Line,XAxis,YAxis,CartesianGrid,Tooltip as RTooltip,Legend}from"recharts";
import{useVirtualizer}from"@tanstack/react-virtual";

const getLineVal=(d,m)=>m==='Occ'?(d.Occ||d['Occupancy %']||0):m==='Covers'?(d['COV TY']||d.COV||d.Covers||0):(d.GIH||d['Guests In-House']||d['Guest In-House']||0);

// ===== Utils compactas =====
const H=["Business Date","Location Name","Revenue Center Name","Day Part Name","Major Group Name","Family Group Name","Menu Item Name","Sales Count","Sales Total","Sales Net VAT before Discount","Sales Net VAT after Discount","Gross Sales before Discount","Gross Sales after Discount","Unit Price","Year","Day","Mapping Order","Weekday","Comp"];const MONEY=new Set(["Sales Net VAT after Discount","Sales Net VAT before Discount","Gross Sales before Discount","Gross Sales after Discount","Unit Price"]),NUM=new Set(["Sales Count","Sales Total","Sales Net VAT before Discount","Sales Net VAT after Discount","Gross Sales before Discount","Gross Sales after Discount","Unit Price","Year"]),WD=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado","Domingo"];const nf=(n,o={})=>Number.isFinite(n)?new Intl.NumberFormat(undefined,o).format(n):"-",moneyFmt=v=>nf(v,{style:"currency",currency:"EUR",maximumFractionDigits:2});const u=a=>[...new Set(a.filter(v=>v!=null&&v!==""))],wdSort=(a,b)=>{const ia=WD.indexOf(a),ib=WD.indexOf(b);return ia<0?1:ib<0?-1:ia-ib},norm=h=>String(h||"").trim().replace(/\s*,\s*/g,", ").replace(/\s+/g," ").replace("Family, Group Name","Family Group Name").replace("Sales Net ,VAT after Discount","Sales Net VAT after Discount"),num=v=>{if(v==null||v==="")return 0;if(typeof v==="number")return Number.isFinite(v)?v:0;if(typeof v==="string"){const c=v.replace(/\./g,"").replace(/,/g,".").replace(/[^0-9.+-]/g,"");const n=parseFloat(c);return Number.isFinite(n)?n:0}const n=Number(v);return Number.isFinite(n)?n:0},pct=(a,b)=>b===0?(a===0?0:Infinity):(a-b)/Math.abs(b),parseISO=s=>{const[y,m,d]=String(s).split("-").map(x=>parseInt(x,10));return(y&&m&&d)?new Date(Date.UTC(y,m-1,d)):new Date(s)},addDaysISO=(iso,days)=>{const d=parseISO(iso);d.setUTCDate(d.getUTCDate()+days);return d.toISOString().slice(0,10)},fmtShort=iso=>{const d=parseISO(iso);return d.toLocaleDateString(undefined,{day:"2-digit",month:"2-digit",year:"2-digit"})},wdOf=iso=>iso?parseISO(iso).toLocaleDateString(undefined,{weekday:"long"}):"";const DOW=iso=>parseISO(iso).getUTCDay();
// Claves de fecha
const monthKey=iso=>{const d=parseISO(iso);return`${d.getUTCFullYear()}-${String(d.getUTCMonth()+1).padStart(2,'0')}`};
const mdKey=iso=>String(iso).slice(5,10); // "MM-DD"
const inMDRange=(md,from,to)=>{if(!from||!to)return true;return(from<=to)?(md>=from&&md<=to):(md>=from||md<=to)};
// Agregador por claves
const agg=(data,keys)=>{const m=new Map();for(const r of data){const k=keys.map(k=>r[k]).join("||"),p=m.get(k)||{_key:k};p["Sales Count"]=(p["Sales Count"]||0)+num(r["Sales Count"]);p["Sales Net VAT after Discount"]=(p["Sales Net VAT after Discount"]||0)+num(r["Sales Net VAT after Discount"]);keys.forEach(k=>p[k]=r[k]);m.set(k,p)}return[...m.values()]};
const dlTpl=()=>{const ws=XLSX.utils.aoa_to_sheet([H]),wb=XLSX.utils.book_new();XLSX.utils.book_append_sheet(wb,ws,"Data");XLSX.writeFile(wb,"Plantilla_ReporteVentas.xlsx")};
const parseExcel=f=>new Promise((res,rej)=>{const r=new FileReader();r.onload=e=>{try{const wb=XLSX.read(new Uint8Array(e.target.result),{type:"array"}),sh=wb.Sheets[wb.SheetNames[0]],rows=XLSX.utils.sheet_to_json(sh,{header:1,defval:""});if(!rows.length)return res([]);const hdr=rows[0].map(norm),body=rows.slice(1),out=body.map(row=>{const o={};hdr.forEach((h,i)=>o[h]=row[i]??"");Object.keys(o).forEach(k=>{if(NUM.has(k))o[k]=num(o[k])});const bd=o["Business Date"];if(typeof bd==="number"){const d=XLSX.SSF.parse_date_code(bd);o["Business Date"]=new Date(Date.UTC(d.y,d.m-1,d.d)).toISOString().slice(0,10)}else if(typeof bd==="string"){const d=new Date(bd);if(!isNaN(d))o["Business Date"]=d.toISOString().slice(0,10)}return o});res(out)}catch(err){rej(err)}};r.onerror=rej;r.readAsArrayBuffer(f)});
const HS=["Business Date","Guests In-House","Occupancy %","Occupied Rooms","Arrival Rooms"],HC=["Business Date","Revenue Center Name","Day Part Name","Guests Count","Category"];
function MultiSelect({label,values=[],selected=[],onChange}){const[open,setOpen]=useState(false),sel=selected,vals=values;const tog=v=>sel.includes(v)?onChange(sel.filter(x=>x!==v)):onChange([...sel,v]);return(<div className="flex flex-col gap-2"><Label className="text-sm text-muted-foreground">{label}</Label><div className="border rounded-xl p-2"><div className="flex gap-2 flex-wrap">{sel.length?sel.map(v=>(<span key={v} className="text-xs bg-muted rounded-full px-2 py-1">{v}</span>)):(<span className="text-xs text-muted-foreground">(sin filtros)</span>)}</div><div className="flex gap-2 mt-2"><Button type="button" size="sm" variant="secondary" onClick={()=>setOpen(o=>!o)}><Filter className="w-4 h-4 mr-1"/>Opciones</Button><Button type="button" size="sm" variant="ghost" onClick={()=>onChange([...vals])}>Todo</Button><Button type="button" size="sm" variant="ghost" onClick={()=>onChange([])}>Limpiar</Button></div>{open&&(<div className="mt-2 border rounded-xl p-2"><ScrollArea className="h-48 pr-2"><div className="grid grid-cols-1 gap-2">{vals.map(v=>(<label key={v} className="flex items-center gap-2 text-sm"><Checkbox checked={sel.includes(v)} onCheckedChange={()=>tog(v)} className="rounded-md"/>{v}</label>))}</div></ScrollArea></div>)}</div></div>)}
const AxisTickJustDay=({x,y,payload})=>{const d=payload?.payload||{},iso=d.tyDate,dt=iso?parseISO(iso):null,dd=dt?dt.getUTCDate():parseInt(String(payload?.value).slice(0,2))||"",wd=dt?["Su","Mo","Tu","We","Th","Fr","Sa"][dt.getUTCDay()]:"";return(<g transform={`translate(${x},${y})`}><text textAnchor="middle" dy={14}>{dd}</text><text textAnchor="middle" dy={28} style={{fontSize:10,opacity:.7}}>{wd}</text></g>)};
function TooltipCovers({active,payload,year,ly}){if(!active||!payload?.length)return null;const d=payload[0].payload||{},ty=d[`CV ${year}`]||0,lv=d[`CV ${ly}`]||0,occ=d.Occ,gih=d.GIH;return(<div className="rounded-md border bg-white p-2 text-xs"><div className="font-medium mb-1">{d.wd||""} {fmtShort(d.tyDate||"")}</div>{d.lyDate&&<div className="mb-1">LY: {wdOf(d.lyDate)} {fmtShort(d.lyDate)}</div>}<div>CY: <b>{nf(ty)}</b> · LY: <b>{nf(lv)}</b></div><div className="text-gray-500">Δ: {nf(ty-lv)} · {nf(pct(ty,lv)*100,{maximumFractionDigits:1})}%</div>{(Number.isFinite(occ)||Number.isFinite(gih))&&(<div className="mt-1 text-gray-700">{Number.isFinite(occ)&&<div>Occ: <b>{nf((occ||0)*100,{maximumFractionDigits:1})}%</b></div>}{Number.isFinite(gih)&&<div>Guests In-House: <b>{nf(gih)}</b></div>}</div>)}</div>)}
function TooltipSales({active,payload,year,ly}){if(!active||!payload?.length)return null;const d=payload[0].payload||{},ty=d[`SN ${year}`]||0,lv=d[`SN ${ly}`]||0,occ=d.Occ,gih=d.GIH;return(<div className="rounded-md border bg-white p-2 text-xs"><div className="font-medium mb-1">{d.wd||""} {fmtShort(d.tyDate||"")}</div>{d.lyDate&&<div className="mb-1">LY: {wdOf(d.lyDate)} {fmtShort(d.lyDate)}</div>}<div>CY: <b>{moneyFmt(ty)}</b> · LY: <b>{moneyFmt(lv)}</b></div><div className="text-gray-500">Δ: {moneyFmt(ty-lv)} · {nf(pct(ty,lv)*100,{maximumFractionDigits:1})}%</div>{(Number.isFinite(occ)||Number.isFinite(gih))&&(<div className="mt-1 text-gray-700">{Number.isFinite(occ)&&<div>Occ: <b>{nf((occ||0)*100,{maximumFractionDigits:1})}%</b></div>}{Number.isFinite(gih)&&<div>Guests In-House: <b>{nf(gih)}</b></div>}</div>)}</div>)}
function TooltipAvg({active,payload,year,ly}){if(!active||!payload?.length)return null;const d=payload[0].payload||{},ty=d[`AC ${year}`]||0,lv=d[`AC ${ly}`]||0;return(<div className="rounded-md border bg-white p-2 text-xs"><div className="font-medium mb-1">{d.wd||""} {fmtShort(d.tyDate||"")}</div><div>CY: <b>{moneyFmt(ty)}</b> · LY: <b>{moneyFmt(lv)}</b></div><div className="text-gray-500">Δ: {moneyFmt(ty-lv)} · {nf(pct(ty,lv)*100,{maximumFractionDigits:1})}%</div></div>)}
const numericCols=new Set(["SC TY","SC LY","SC Var","SC Var %","SN TY","SN LY","SN Var","SN Var %","Units TY","Units LY","Units Var","Units Var %","Net TY","Net LY","Net Var","Net Var %","Ventas TY","Ventas LY","Ventas Var","Ventas Var %","CPU","Penetracion"]),labelFor=k=>({"Revenue Center Name":"Revenue Center","Location Name":"Location","TY Date":"Fecha CY","LY Date":"Fecha LY",Weekday:"Weekday","SC TY":"Unidades CY","SC LY":"Unidades LY","SC Var":"Unid Var","SC Var %":"Unid Var %","SN TY":"Ventas CY","SN LY":"Ventas LY","SN Var":"Ventas Var","SN Var %":"Ventas Var %","Day Part":"Day Part","Mapping Order":"Type","Units TY":"Unidades CY","Units LY":"Unidades LY","Units Var":"Unid Var","Units Var %":"Unid Var %","Net TY":"Ventas CY","Net LY":"Ventas LY","Net Var":"Ventas Var","Net Var %":"Ventas Var %","Ventas TY":"Ventas CY","Ventas LY":"Ventas LY","Ventas Var":"Ventas Var","Ventas Var %":"Ventas Var %","Menu Item Name":"Producto","Month":"Mes","CPU":"Consumo por cover","Penetracion":"Penetracion"}[k]||k),Cols=({map,cols})=>(<colgroup>{cols.map(c=>(<col key={c} style={{width:(map[c]||120)}}/>))}</colgroup>);
function VTable({rows,cols,widthMap,renderRow,onSort}){const parentRef=useRef(null),v=useVirtualizer({count:rows.length,getScrollElement:()=>parentRef.current,estimateSize:()=>34,overscan:10}),it=v.getVirtualItems(),tot=v.getTotalSize(),padT=it[0]?.start||0,padB=tot-(it.at(-1)?.end||0);return(<div ref={parentRef} className="h-[60vh] overflow-auto rounded-xl border"><table className="table-fixed min-w-full text-sm"><Cols map={widthMap} cols={cols}/><thead className="bg-muted/50"><tr>{cols.map(col=>(<th key={col} className={`px-3 py-2 ${numericCols.has(col)?"text-right":"text-left"} whitespace-nowrap`}><div className="flex items-center gap-1"><span>{labelFor(col)}</span><div className="flex flex-col"><button type="button" className="p-0" onClick={()=>onSort(col,"asc")}><ChevronUp className="w-3 h-3"/></button><button type="button" className="p-0" onClick={()=>onSort(col,"desc")}><ChevronDown className="w-3 h-3"/></button></div></div></th>))}</tr></thead><tbody><tr><td colSpan={cols.length} style={{height:padT}}/></tr>{it.map(i=>(<tr key={i.key} className="border-t">{renderRow(rows[i.index])}</tr>))}<tr><td colSpan={cols.length} style={{height:padB}}/></tr></tbody></table></div>)}
// ===== App =====
export default function App(){const fileRef=useRef(null),statsRef=useRef(null),coversRef=useRef(null);const[rows,setRows]=useState([]),[err,setErr]=useState(""),[stats,setStats]=useState([]),[statsErr,setStatsErr]=useState(""),[covers,setCovers]=useState([]),[coversErr,setCoversErr]=useState(""),[dateFrom,setDateFrom]=useState(""),[dateTo,setDateTo]=useState("");const[fDP,setFDP]=useState([]),[fMO,setFMO]=useState([]),[fWD,setFWD]=useState([]),[fFam,setFFam]=useState([]),[includeComp,setIncludeComp]=useState(false);const[openList,setOpenList]=useState(false);const[showExcel,setShowExcel]=useState(false),[showFilters,setShowFilters]=useState(false);const years=useMemo(()=>u(rows.map(r=>r.Year)).map(Number).filter(Number.isFinite).sort((a,b)=>a-b),[rows]),[year,setYear]=useState(),ly=useMemo(()=>typeof year==="number"?year-1:undefined,[year]);const dps=useMemo(()=>u(rows.map(r=>r["Day Part Name"]).sort()),[rows]),mos=useMemo(()=>u(rows.map(r=>r["Mapping Order"]).sort()),[rows]),wds=useMemo(()=>u(rows.map(r=>r.Weekday).sort(wdSort)),[rows]),fams=useMemo(()=>u(rows.map(r=>r["Family Group Name"]).sort()),[rows]);const filtered=useMemo(()=>rows.filter(r=>(includeComp||String(r.Comp||"")!=="Comp")&&(!fDP.length||fDP.includes(r["Day Part Name"]))&&(!fMO.length||fMO.includes(r["Mapping Order"]))&&(!fWD.length||fWD.includes(r.Weekday))&&(!fFam.length||fFam.includes(r["Family Group Name"]))&&((dateFrom&&dateTo)?inMDRange(mdKey(r["Business Date"]),dateFrom,dateTo):true)),[rows,fDP,fMO,fWD,fFam,includeComp,dateFrom,dateTo]);const dFiltered=useDeferredValue(filtered);const allRC=useMemo(()=>u(dFiltered.map(r=>r["Revenue Center Name"]).sort()),[dFiltered]),allLoc=useMemo(()=>u(dFiltered.map(r=>r["Location Name"]).sort()),[dFiltered]);const[tab,setTab]=useState("weekday");useEffect(()=>{setOpenList(false)},[tab]);
// Stats ↦ mapa por fecha (sinónimos robustos)
const statsByDate=useMemo(()=>{const m=new Map();stats.forEach(r=>{const iso=r["Business Date"];if(!iso)return;let occ=Number(r["Occupancy %"]??r["Occupancy"]??r["Occ"]??0);if(occ>1.5)occ/=100;let gih=num(r["Guests In-House"]??r["Guests In House"]??r["Guest In House"]??r["Guest In-House"]??r["GIH"]);m.set(iso,{occ,gih,occRooms:num(r["Occupied Rooms"]),arr:num(r["Arrival Rooms"])})});return m},[stats]);const los=useMemo(()=>{let oc=0,ar=0;stats.forEach(r=>{oc+=num(r["Occupied Rooms"]);ar+=num(r["Arrival Rooms"]) });return ar?oc/ar:0},[stats]);
// Covers ↦ mapa por RC+fecha
const coversByRcDate=useMemo(()=>{const m=new Map();covers.forEach(r=>{const rc=r["Revenue Center Name"],dt=r["Business Date"];if(!rc||!dt)return;const k=`${rc}||${dt}`;m.set(k,(m.get(k)||0)+num(r["Guests Count"]))});return m},[covers]);
// Comparativa CY vs LY (ventas) + selector de línea
const[lineMetric,setLineMetric]=useState("GIH"),lineName=useMemo(()=>lineMetric==="GIH"?"Guests In-House (hotel)":(lineMetric==="Occ"?"Occupancy %":"Covers"),[lineMetric]);const compPairs=useMemo(()=>{if(!dFiltered.length||!year||!years.includes(ly))return[];const passNonDate=r=>(includeComp||String(r.Comp||"")!=="Comp")&&(!fDP.length||fDP.includes(r["Day Part Name"]))&&(!fMO.length||fMO.includes(r["Mapping Order"]))&&(!fWD.length||fWD.includes(r.Weekday))&&(!fFam.length||fFam.includes(r["Family Group Name"]));const ty=agg(dFiltered.filter(r=>r.Year===year),["Revenue Center Name","Business Date","Location Name"]),lyA=agg(rows.filter(r=>r.Year===ly&&passNonDate(r)),["Revenue Center Name","Business Date","Location Name"]),idx=new Map(lyA.map(r=>[`${r["Revenue Center Name"]}||${r["Business Date"]}||${r["Location Name"]}`,r]));return ty.map(t=>{const rc=t["Revenue Center Name"],loc=t["Location Name"],dt=t["Business Date"],wd=t.Weekday||wdOf(dt),wdN=DOW(dt),bases=[-364,-365,-371];let l=null,lyD=null;for(const base of bases){const b=addDaysISO(dt,base),sh=(wdN-parseISO(b).getUTCDay()+7)%7,cand=[addDaysISO(b,sh),addDaysISO(b,sh-7)];for(const c of cand){const f=idx.get(`${rc}||${c}||${loc}`);if(f){l=f;lyD=c;break}}if(l)break}if(!l){for(const c of [addDaysISO(dt,-364),addDaysISO(dt,-365)]){const f=idx.get(`${rc}||${c}||${loc}`);if(f){l=f;lyD=c;break}}}return{"Revenue Center Name":rc,"Location Name":loc,"TY Date":dt,"LY Date":lyD,Weekday:wd,"SC TY":t["Sales Count"]||0,"SC LY":l?l["Sales Count"]:0,"SC Var":(t["Sales Count"]||0)-(l?l["Sales Count"]:0),"SC Var %":pct((t["Sales Count"]||0),(l?l["Sales Count"]:0)),"SN TY":t["Sales Net VAT after Discount"]||0,"SN LY":l?l["Sales Net VAT after Discount"]:0,"SN Var":(t["Sales Net VAT after Discount"]||0)-(l?l["Sales Net VAT after Discount"]:0),"SN Var %":pct((t["Sales Net VAT after Discount"]||0),(l?l["Sales Net VAT after Discount"]:0))}}).sort((a,b)=>a["Revenue Center Name"].localeCompare(b["Revenue Center Name"])||a["Location Name"].localeCompare(b["Location Name"])||parseISO(a["TY Date"]) - parseISO(b["TY Date"]))},[dFiltered,rows,year,ly,years,includeComp,fDP,fMO,fWD,fFam]);const rcList=useMemo(()=>u(compPairs.map(r=>r["Revenue Center Name"])),[compPairs]);const[rcSel,setRCSel]=useState(""),compLocList=useMemo(()=>{const rc=rcSel||rcList[0];return u(compPairs.filter(r=>r["Revenue Center Name"]===rc).map(r=>r["Location Name"]).sort())},[compPairs,rcSel,rcList]);const[compLocSel,setCompLocSel]=useState("");
// Datos gráficos por fecha (Covers + Ventas + línea seleccionada + Avg Check)
const dataChart=useMemo(()=>{const rc=rcSel||rcList[0];return compPairs.filter(r=>r["Revenue Center Name"]===rc&&(!compLocSel||r["Location Name"]===compLocSel)).map(r=>{const k=`${rc}||${r["TY Date"]}`,cv=coversByRcDate.get(k)??null,cvLy=r["LY Date"]?coversByRcDate.get(`${rc}||${r["LY Date"]}`)??null:null,gi=statsByDate.get(r["TY Date"])?.gih??null,oc=statsByDate.get(r["TY Date"])?.occ??null;const acTy=(r["SN TY"]&&cv)?(r["SN TY"]/cv):null,acLy=(r["SN LY"]&&cvLy)?(r["SN LY"]/cvLy):null;return{x:fmtShort(r["TY Date"]),wd:r.Weekday,tyDate:r["TY Date"],lyDate:r["LY Date"],[`CV ${year}`]:cv,[`CV ${ly}`]:cvLy,[`SN ${year}`]:r["SN TY"],[`SN ${ly}`]:r["SN LY"],GIH:gi,Occ:oc,Covers:cv,[`AC ${year}`]:acTy,[`AC ${ly}`]:acLy}})},[compPairs,rcSel,compLocSel,rcList,year,ly,statsByDate,coversByRcDate]);
const cmpVal=(row,key)=>key.includes("Date")?(row[key]?parseISO(row[key]).getTime():-Infinity):numericCols.has(key)?Number(row[key]??0):String(row[key]??"");const[sortKeyComp,setSortKeyComp]=useState("TY Date"),[sortDirComp,setSortDirComp]=useState("asc"),setSortComp=(k,d)=>{setSortKeyComp(k);setSortDirComp(d)};const compCols=["Revenue Center Name","Location Name","TY Date","LY Date","Weekday","SC TY","SC LY","SC Var","SC Var %","SN TY","SN LY","SN Var","SN Var %"];const selectedCompRows=useMemo(()=>{const rc=rcSel||rcList[0];return compPairs.filter(r=>r["Revenue Center Name"]===rc&&(!compLocSel||r["Location Name"]===compLocSel))},[compPairs,rcSel,rcList,compLocSel]);const sortedCompRows=useMemo(()=>{const a=[...selectedCompRows];a.sort((x,y)=>{const av=cmpVal(x,sortKeyComp),bv=cmpVal(y,sortKeyComp),c=av<bv?-1:av>bv?1:0;return sortDirComp==="asc"?c:-c});return a},[selectedCompRows,sortKeyComp,sortDirComp]);
// Day Part (colapsable por DP, hijos por Type)
const[dpRCSel,setDpRCSel]=useState(""),[dpLocSel,setDpLocSel]=useState(""),[openDP,setOpenDP]=useState(new Set());const dpData=useMemo(()=>{if(!dFiltered.length||!year||!years.includes(ly))return{groups:[],flat:[]};let src=[...dFiltered];if(dpLocSel)src=src.filter(r=>r["Location Name"]===dpLocSel);if(dpRCSel)src=src.filter(r=>r["Revenue Center Name"]===dpRCSel);const ty=agg(src.filter(r=>r.Year===year),["Day Part Name","Mapping Order"]),lyA=agg(src.filter(r=>r.Year===ly),["Day Part Name","Mapping Order"]),mTy=new Map(ty.map(r=>[`${r["Day Part Name"]}||${r["Mapping Order"]}`,r])),mLy=new Map(lyA.map(r=>[`${r["Day Part Name"]}||${r["Mapping Order"]}`,r]));const keys=new Set([...mTy.keys(),...mLy.keys()]);const children=[...keys].map(k=>{const t=mTy.get(k),l=mLy.get(k),dp=(t?.["Day Part Name"])||(l?.["Day Part Name"])||"",mo=(t?.["Mapping Order"])||(l?.["Mapping Order"])||"",scTy=t?.["Sales Count"]||0,scLy=l?.["Sales Count"]||0,snTy=t?.["Sales Net VAT after Discount"]||0,snLy=l?.["Sales Net VAT after Discount"]||0;return{type:"child",DayPart:dp,Type:mo,"SC TY":scTy,"SC LY":scLy,"SC Var":scTy-scLy,"SC Var %":pct(scTy,scLy),"SN TY":snTy,"SN LY":snLy,"SN Var":snTy-snLy,"SN Var %":pct(snTy,snLy)}});const byDP=new Map();children.forEach(r=>{const g=byDP.get(r.DayPart)||{type:"group",DayPart:r.DayPart,"SC TY":0,"SC LY":0,"SC Var":0,"SN TY":0,"SN LY":0,"SN Var":0,children:[]};g["SC TY"]+=r["SC TY"];g["SC LY"]+=r["SC LY"];g["SC Var"]=g["SC TY"]-g["SC LY"];g["SN TY"]+=r["SN TY"];g["SN LY"]+=r["SN LY"];g["SN Var"]=g["SN TY"]-g["SN LY"];byDP.set(r.DayPart,g);g.children.push(r)});const groups=[...byDP.values()].map(g=>({...g,"SC Var %":pct(g["SC TY"],g["SC LY"]),"SN Var %":pct(g["SN TY"],g["SN LY"])}));return{groups,children}},[dFiltered,dpLocSel,dpRCSel,year,ly,years]);const[dpSortKey,setDpSortKey]=useState("DayPart"),[dpSortDir,setDpSortDir]=useState("asc"),setSortDP=(k,d)=>{setDpSortKey(k);setDpSortDir(d)};const dpCols=["DayPart","Type","SC TY","SC LY","SC Var","SC Var %","SN TY","SN LY","SN Var","SN Var %"];const dpFlatRows=useMemo(()=>{const g=[...dpData.groups].sort((a,b)=>{const av=dpSortKey.includes("TY")||dpSortKey.includes("LY")||dpSortKey.includes("Var")?a[dpSortKey]:String(a[dpSortKey]||"");const bv=dpSortKey.includes("TY")||dpSortKey.includes("LY")||dpSortKey.includes("Var")?b[dpSortKey]:String(b[dpSortKey]||"");const c=av<bv?-1:av>bv?1:0;return dpSortDir==="asc"?c:-c});const out=[];g.forEach(gr=>{out.push(gr);if(openDP.has(gr.DayPart))gr.children.sort((a,b)=>{const av=a[dpSortKey.includes("DayPart")?"Type":dpSortKey]??0,bv=b[dpSortKey.includes("DayPart")?"Type":dpSortKey]??0;const c=av<bv?-1:av>bv?1:0;return dpSortDir==="asc"?c:-c}).forEach(ch=>out.push(ch))});return out},[dpData,dpSortKey,dpSortDir,openDP]);
// Top productos (mensual)
const monthsTY=useMemo(()=>{if(!year)return[];return u(dFiltered.filter(r=>r.Year===year).map(r=>monthKey(r["Business Date"]) )).sort()},[dFiltered,year]);const[month,setMonth]=useState("");useEffect(()=>{if(monthsTY.length&&!monthsTY.includes(month))setMonth(monthsTY.at(-1));if(!monthsTY.length)setMonth("")},[monthsTY]);const lyMonth=useMemo(()=>month?`${ly}-${(month.split('-')[1]||'').padStart(2,'0')}`:undefined,[month,ly]);const[topRCSel,setTopRCSel]=useState(""),[topLocSel,setTopLocSel]=useState(""),[q,setQ]=useState(""),[searchTxt,setSearchTxt]=useState("");useEffect(()=>{const id=setTimeout(()=>setSearchTxt(q),200);return()=>clearTimeout(id)},[q]);const catOptions=useMemo(()=>["Food","Beverage","Other"].filter(x=>dFiltered.some(r=>String(r["Mapping Order"]).toLowerCase().includes(x.toLowerCase()))),[dFiltered]);const[topCat,setTopCat]=useState("");const topAll=useMemo(()=>{if(!month||!year||!years.includes(ly))return[];let srcTy=dFiltered.filter(r=>r.Year===year&&monthKey(r["Business Date"])===month),srcLy=dFiltered.filter(r=>r.Year===ly&&monthKey(r["Business Date"])===lyMonth);if(topLocSel){srcTy=srcTy.filter(r=>r["Location Name"]===topLocSel);srcLy=srcLy.filter(r=>r["Location Name"]===topLocSel)}if(topRCSel){srcTy=srcTy.filter(r=>r["Revenue Center Name"]===topRCSel);srcLy=srcLy.filter(r=>r["Revenue Center Name"]===topRCSel)}const ty=agg(srcTy,["Mapping Order","Menu Item Name","Business Date"]),lyA=agg(srcLy,["Mapping Order","Menu Item Name"]),days=new Set(srcTy.map(r=>r["Business Date"])),rcSet=new Set(srcTy.map(r=>r["Revenue Center Name"])),monthCOV=[...days].reduce((s,d)=>{let t=0;rcSet.forEach(rc=>{t+=(coversByRcDate.get(`${rc}||${d}`)||0)});return s+t},0)||0,mTy=new Map(),mLy=new Map();ty.forEach(r=>{const k=`${r["Mapping Order"]}||${r["Menu Item Name"]}`;const o=mTy.get(k)||{"Mapping Order":r["Mapping Order"],"Menu Item Name":r["Menu Item Name"],"Sales Count":0,"Sales Net VAT after Discount":0};o["Sales Count"]+=(r["Sales Count"]||0);o["Sales Net VAT after Discount"]+=(r["Sales Net VAT after Discount"]||0);mTy.set(k,o)});lyA.forEach(r=>{const k=`${r["Mapping Order"]}||${r["Menu Item Name"]}`;mLy.set(k,r)});const keys=new Set([...mTy.keys(),...mLy.keys()]);return[...keys].map(k=>{const t=mTy.get(k),l=mLy.get(k)||{};const uTy=t?.["Sales Count"]||0,uLy=l?.["Sales Count"]||0,nTy=t?.["Sales Net VAT after Discount"]||0,nLy=l?.["Sales Net VAT after Discount"]||0;const cpu=monthCOV?(uTy/monthCOV):null,pen=monthCOV?(uTy/monthCOV):null;return{"Mapping Order":t?.["Mapping Order"]||l?.["Mapping Order"]||"","Menu Item Name":t?.["Menu Item Name"]||l?.["Menu Item Name"]||"",mi_lc:String(t?.["Menu Item Name"]||l?.["Menu Item Name"]||"").toLowerCase(),"Units TY":uTy,"Units LY":uLy,"Units Var":uTy-uLy,"Units Var %":pct(uTy,uLy),"Ventas TY":nTy,"Ventas LY":nLy,"Ventas Var":nTy-nLy,"Ventas Var %":pct(nTy,nLy),CPU:cpu,Penetracion:pen,monthCOV}})},[dFiltered,year,years,month,lyMonth,topLocSel,topRCSel,coversByRcDate]);const topRows=useMemo(()=>{const cat=topCat.toLowerCase();return topAll.filter(r=>(!topCat||String(r["Mapping Order"]).toLowerCase().includes(cat))&&(!searchTxt||r.mi_lc.includes(searchTxt.toLowerCase())))},[topAll,topCat,searchTxt]);const[topSortKey,setTopSortKey]=useState("Ventas TY"),[topSortDir,setTopSortDir]=useState("desc"),setSortTop=(k,d)=>{setTopSortKey(k);setTopSortDir(d)};const cmpValTop=(row,key)=>numericCols.has(key)?Number(row[key]??0):String(row[key]??"");const topSortedRows=useMemo(()=>{const a=[...topRows];a.sort((x,y)=>{const av=cmpValTop(x,topSortKey),bv=cmpValTop(y,topSortKey),c=av<bv?-1:av>bv?1:0;return topSortDir==="asc"?c:-c});return a.slice(0,40)},[topRows,topSortKey,topSortDir]);const[pickMode,setPickMode]=useState(false),[selKeys,setSelKeys]=useState(new Set());const keyTop=r=>`${r["Mapping Order"]}||${r["Menu Item Name"]}`,toggleSel=k=>setSelKeys(s=>{const n=new Set(s);n.has(k)?n.delete(k):n.add(k);return n});const sumTop=rows=>{const S=k=>rows.reduce((t,x)=>t+Number(x[k]||0),0),uCY=S("Units TY"),uLY=S("Units LY"),vCY=S("Ventas TY"),vLY=S("Ventas LY");return{"Units TY":uCY,"Units LY":uLY,"Units Var":uCY-uLY,"Units Var %":pct(uCY,uLY),"Ventas TY":vCY,"Ventas LY":vLY,"Ventas Var":vCY-vLY,"Ventas Var %":pct(vCY,vLY)}},topSubtotal=useMemo(()=>sumTop(topSortedRows),[topSortedRows]),topSelSubtotal=useMemo(()=>sumTop(topSortedRows.filter(r=>selKeys.has(keyTop(r)))),[topSortedRows,selKeys]);const topRCList=useMemo(()=>u(dFiltered.map(r=>r["Revenue Center Name"]) ),[dFiltered]),topLocList=useMemo(()=>u(dFiltered.map(r=>r["Location Name"]) ),[dFiltered]);
// Observaciones (IA)
const insights=useMemo(()=>{if(!dFiltered.length||!year||!years.includes(ly))return[];const P=v=>nf(v*100,{maximumFractionDigits:1})+"%";if(tab==="weekday"){const rc=rcSel||rcList[0],base=compPairs.filter(r=>r["Revenue Center Name"]===rc&&(!compLocSel||r["Location Name"]===compLocSel));if(!base.length)return[];const sum=(a,k)=>a.reduce((s,x)=>s+Number(x[k]||0),0),ty=sum(base,'SN TY'),lv=sum(base,'SN LY'),n=[],s=[...base].sort((a,b)=>(b['SN Var']||0)-(a['SN Var']||0));n.push(`RC ${rc}${compLocSel?` · ${compLocSel}`:""}: Ventas CY vs LY ${moneyFmt(ty)} vs ${moneyFmt(lv)} (Δ ${moneyFmt(ty-lv)} · ${P(lv?((ty-lv)/Math.abs(lv)):Infinity)}).`);if(s[0])n.push(`Mejor día: ${s[0].Weekday} ${fmtShort(s[0]["TY Date"])}, Δ ${moneyFmt(s[0]['SN Var'])}.`);if(s.at(-1))n.push(`Peor día: ${s.at(-1).Weekday} ${fmtShort(s.at(-1)["TY Date"])}, Δ ${moneyFmt(s.at(-1)['SN Var'])}.`);const w={},add=k=>(w[k]??={ty:0,lv:0});base.forEach(r=>{add(r.Weekday).ty+=r['SN TY']||0;add(r.Weekday).lv+=r['SN LY']||0});const wkAbs=Object.entries(w).map(([k,v])=>({k,abs:Math.abs((v.ty||0)-(v.lv||0)),raw:(v.ty||0)-(v.lv||0)})).sort((a,b)=>b.abs-a.abs);if(wkAbs[0])n.push(`Weekday con mayor variacion: ${wkAbs[0].k} (${moneyFmt(wkAbs[0].raw)}).`);const wkMin=[...wkAbs].reverse()[0];if(wkMin)n.splice(Math.max(0,n.length-1),0,`Weekday con menor variacion: ${wkMin.k} (${moneyFmt(wkMin.raw)}).`);const avgMap={};base.forEach(r=>{const k=r.Weekday||wdOf(r["TY Date"]);(avgMap[k]??={s:0,c:0}).s+=r['SN TY']||0;avgMap[k].c++});const fmtK=v=>nf(Math.round((v||0)/1000))+'k';const avgList=Object.entries(avgMap).map(([k,v])=>({k,avg:v.c?(v.s/v.c):0})).sort((a,b)=>b.avg-a.avg);if(avgList.length)n.push('Media de facturacion por weekday (CY): '+avgList.map(x=>`${x.k} (${fmtK(x.avg)})`).join(', ')+'.');return n.slice(0,6)}else if(tab==="dpmo"){const b=[...dpData.groups];if(!b.length)return[];const n=[],s=[...b].sort((a,b)=>((b['SN Var']||0)-(a['SN Var']||0)));if(s[0])n.push(`Mejor Day Part: ${s[0]["DayPart"]} (Δ ${moneyFmt(s[0]['SN Var'])}, ${P(s[0]['SN Var %'])}).`);if(s.at(-1))n.push(`Peor Day Part: ${s.at(-1)["DayPart"]} (Δ ${moneyFmt(s.at(-1)['SN Var'])}).`);const tot=b.reduce((x,y)=>x+(y['SN TY']||0),0),share=[...b].map(x=>({k:x['DayPart'],p:tot?((x['SN TY']||0)/tot):0})).sort((a,b)=>b.p-a.p);if(share[0])n.push(`Mayor peso CY: ${share[0].k} (${P(share[0].p)} de ventas CY).`);return n.slice(0,5)}else if(tab==="top"){const b=[...topAll].filter(r=>!topCat||String(r['Mapping Order']).toLowerCase().includes(topCat.toLowerCase()));if(!b.length)return[];const n=[],bestTy=[...b].sort((a,b)=>((b['Ventas TY']||0)-(a['Ventas TY']||0)))[0];if(bestTy)n.push(`Top Ventas CY (${topCat||'Todos'}): ${bestTy['Menu Item Name']} (${moneyFmt(bestTy['Ventas TY'])}).`);const bestVar=[...b].sort((a,b)=>((b['Ventas Var']||0)-(a['Ventas Var']||0)))[0];if(bestVar)n.push(`Mayor crecimiento: ${bestVar['Menu Item Name']} (Δ ${moneyFmt(bestVar['Ventas Var'])}, ${nf((bestVar['Ventas Var %']||0)*100,{maximumFractionDigits:1})}%).`);const cpux=[...b].filter(x=>Number.isFinite(x.CPU)&&x.CPU>0).sort((a,b)=>b.CPU-a.CPU)[0];if(cpux)n.push(`Mejor consumo por cover (alto es mejor): ${cpux['Menu Item Name']} (${nf(cpux.CPU,{maximumFractionDigits:2})} ud/cover).`);const penx=[...b].filter(x=>Number.isFinite(x.Penetracion)&&x.Penetracion>0).sort((a,b)=>b.Penetracion-a.Penetracion)[0];if(penx)n.push(`Mayor penetracion: ${penx['Menu Item Name']} (${nf((penx.Penetracion||0)*100,{maximumFractionDigits:2})}%).`);return n.slice(0,6)}return[]},[tab,dFiltered,year,ly,years,rcSel,rcList,compLocSel,compPairs,dpData,topAll,topCat]);
// ===== Carga de archivos =====
const onFile=async e=>{const f=e.target.files?.[0];if(!f)return;setErr("");try{const data=await parseExcel(f);if(!data.length){setRows([]);return}const fixed=data.map(r=>{const o={};for(const h of H)o[h]=r[h]??r[norm(h)]??r[h?.replace(", "," ")]??r[h?.replace(/\s+/g," ")]??"";if(!o.Weekday&&o["Business Date"]){const d=new Date(o["Business Date"]);if(!isNaN(d))o.Weekday=d.toLocaleDateString(undefined,{weekday:"long"})}return o});setRows(fixed);const ys=u(fixed.map(r=>r.Year)).map(Number).filter(Number.isFinite).sort((a,b)=>a-b);if(ys.length)setYear(ys.at(-1));}catch(e){console.error(e);setErr("No se pudo leer el archivo. Revisa el formato.")}finally{if(fileRef.current)fileRef.current.value=""}};
const onFileStats=async e=>{const f=e.target.files?.[0];if(!f)return;setStatsErr("");try{const data=await parseExcel(f);const fixed=data.map(r=>{const o={};for(const h of HS)o[h]=r[h]??r[norm(h)]??r[h?.replace(/\s+/g," ")]??"";o["Guests In-House"]=o["Guests In-House"]??o["Guests In House"]??o["Guest In House"]??o["Guest In-House"]??o["GIH"]??o["Guests"]??o["Guests in House"];o["Occupancy %"]=o["Occupancy %"]??o["Occupancy"]??o["Occ"];const bd=o["Business Date"];if(typeof bd==="number"){const d=XLSX.SSF.parse_date_code(bd);o["Business Date"]=new Date(Date.UTC(d.y,d.m-1,d.d)).toISOString().slice(0,10)}else if(typeof bd==="string"){const d=new Date(bd);if(!isNaN(d))o["Business Date"]=d.toISOString().slice(0,10)}return o});setStats(fixed)}catch(e){setStatsErr("No se pudo leer Statistics Guest.")}finally{if(statsRef.current)statsRef.current.value=""}};
const onFileCovers=async e=>{const f=e.target.files?.[0];if(!f)return;setCoversErr("");try{const data=await parseExcel(f);const fixed=data.map(r=>{const o={};for(const h of HC)o[h]=r[h]??r[norm(h)]??"";const bd=o["Business Date"];if(typeof bd==="number"){const d=XLSX.SSF.parse_date_code(bd);o["Business Date"]=new Date(Date.UTC(d.y,d.m-1,d.d)).toISOString().slice(0,10)}else if(typeof bd==="string"){const d=new Date(bd);if(!isNaN(d))o["Business Date"]=d.toISOString().slice(0,10)}return o});setCovers(fixed)}catch(e){setCoversErr("No se pudo leer Covers.")}finally{if(coversRef.current)coversRef.current.value=""}};
// ===== Render =====
const W={comp:{"Revenue Center Name":200,"Location Name":160,"TY Date":90,"LY Date":90,Weekday:110,"SC TY":110,"SC LY":110,"SC Var":110,"SC Var %":110,"SN TY":120,"SN LY":120,"SN Var":120,"SN Var %":110},dpmo:{DayPart:160,Type:180,"SC TY":110,"SC LY":110,"SC Var":110,"SC Var %":110,"SN TY":120,"SN LY":120,"SN Var":120,"SN Var %":110},top:{Sel:44,"Menu Item Name":280,"Units TY":110,"Units LY":110,"Units Var":110,"Units Var %":110,"Ventas TY":120,"Ventas LY":120,"Ventas Var":120,"Ventas Var %":110,CPU:150}},WReg=useMemo(()=>Object.fromEntries(H.map(h=>[h,NUM.has(h)?120:180])),[]);
return(<div className="p-4 md:p-6 lg:p-8 max-w-[1400px] mx-auto"><div className="flex items-center justify-between mb-4"><h1 className="text-2xl font-semibold">F&B Performance v2 – CY vs LY</h1><div className="flex gap-2"><Button onClick={dlTpl} variant="secondary"><Download className="w-4 h-4 mr-1"/>Descargar plantilla</Button><Dialog open={openList} onOpenChange={setOpenList}><DialogTrigger asChild><Button variant="outline"><List className="w-4 h-4 mr-1"/>Ver lista completa</Button></DialogTrigger><DialogContent className="max-w-[95vw] max-h-[85vh] overflow-auto"><DialogHeader><DialogTitle>Registros (todas las columnas)</DialogTitle></DialogHeader><VTable rows={dFiltered} cols={H} widthMap={WReg} onSort={()=>{}} renderRow={r=>H.map(h=>(<td key={h} className="px-3 py-1 whitespace-nowrap overflow-hidden text-ellipsis">{NUM.has(h)?(MONEY.has(h)?moneyFmt(num(r[h])):nf(num(r[h]))):String(r[h]??"")}</td>))}/></DialogContent></Dialog><Button variant="outline" onClick={()=>setRows([])}><RefreshCw className="w-4 h-4 mr-1"/>Reiniciar</Button></div></div>
{/* 1) Cargar archivos */}
<Card className="mb-3"><CardHeader className="pb-2 flex items-center justify-between"><CardTitle className="text-lg">1) Cargar Excel · Statistics · Covers</CardTitle><div className="flex items-center gap-1"><Button size="icon" variant="ghost" onClick={()=>setShowExcel(s=>!s)} aria-label="Minimizar">{showExcel?<ChevronUp className="w-4 h-4"/>:<ChevronDown className="w-4 h-4"/>}</Button></div></CardHeader>{showExcel&&(<CardContent className="space-y-3"><div className="flex flex-col md:flex-row gap-3 md:items-center"><Input ref={fileRef} type="file" accept=".xlsx,.xls,.csv" onChange={onFile}/><Button variant="default" onClick={()=>fileRef.current?.click()}><Upload className="w-4 h-4 mr-1"/>Ventas</Button><div className="text-sm text-muted-foreground">Cabeceras: {H.join(", ")}</div></div>{err&&<div className="text-sm text-red-600">{err}</div>}<div className="text-sm text-muted-foreground">Ventas cargadas: {rows.length}</div><Separator className="my-2"/><div className="flex flex-col md:flex-row gap-3 md:items-center"><Input ref={statsRef} type="file" accept=".xlsx,.xls,.csv" onChange={onFileStats}/><Button variant="default" onClick={()=>statsRef.current?.click()}><Upload className="w-4 h-4 mr-1"/>Statistics</Button><div className="text-sm text-muted-foreground">Headers Stats: {HS.join(", ")}</div></div>{statsErr&&<div className="text-sm text-red-600">{statsErr}</div>}<div className="text-sm text-muted-foreground">Stats: {stats.length} · LoS: {nf(los,{maximumFractionDigits:2})}</div><Separator className="my-2"/><div className="flex flex-col md:flex-row gap-3 md:items-center"><Input ref={coversRef} type="file" accept=".xlsx,.xls,.csv" onChange={onFileCovers}/><Button variant="default" onClick={()=>coversRef.current?.click()}><Upload className="w-4 h-4 mr-1"/>Covers</Button><div className="text-sm text-muted-foreground">Headers Covers: {HC.join(", ")}</div></div>{coversErr&&<div className="text-sm text-red-600">{coversErr}</div>}<div className="text-sm text-muted-foreground">Covers: {covers.length}</div></CardContent>)}</Card>
{/* 2) Filtros */}
{rows.length>0&&(<Card className="mb-3"><CardHeader className="pb-2 flex items-center justify-between"><CardTitle className="text-lg">2) Filtros y parámetros</CardTitle><div className="flex items-center gap-2"><div className="text-xs text-muted-foreground">LY: <b>{typeof year==="number"?year-1:"-"}</b></div><Button size="icon" variant="ghost" onClick={()=>setShowFilters(s=>!s)} aria-label="Minimizar">{showFilters?<ChevronUp className="w-4 h-4"/>:<ChevronDown className="w-4 h-4"/>}</Button></div></CardHeader>{showFilters&&(<CardContent><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"><div className="flex flex-col gap-2"><Label>Año (CY)</Label><select className="border rounded-xl px-3 py-2" value={year??""} onChange={e=>setYear(Number(e.target.value))}>{years.map(y=>(<option key={y} value={y}>{y}</option>))}</select><label className="flex items-center gap-2 text-sm mt-1"><Checkbox checked={includeComp} onCheckedChange={v=>setIncludeComp(Boolean(v))}/>Incluir líneas Comp</label>
<div className="flex flex-col gap-2"><Label>Rango de fechas (sin año)</Label><div className="flex items-center gap-2"><input type="date" className="border rounded-xl px-3 py-2" value={dateFrom?`2000-${dateFrom}`:""} onChange={e=>setDateFrom(e.target.value?e.target.value.slice(5):"")}/><span className="text-sm text-muted-foreground">a</span><input type="date" className="border rounded-xl px-3 py-2" value={dateTo?`2000-${dateTo}`:""} onChange={e=>setDateTo(e.target.value?e.target.value.slice(5):"")}/><Button type="button" size="sm" variant="ghost" onClick={()=>{setDateFrom("");setDateTo("");}}>Limpiar</Button></div><div className="text-xs text-muted-foreground">Ignora el año y aplica a CY y LY. Admite rangos que crucen fin de año (p. ej., 15/09 → 15/06).</div></div>
<MultiSelect label="Day Part Name" values={dps} selected={fDP} onChange={setFDP}/><MultiSelect label="Type (Food/Beverage/Other)" values={mos} selected={fMO} onChange={setFMO}/><MultiSelect label="Weekday" values={wds} selected={fWD} onChange={setFWD}/><MultiSelect label="Familia" values={fams} selected={fFam} onChange={setFFam}/></div></div></CardContent>)}</Card>)}
{/* IA */}
{rows.length>0&&insights.length>0&&(<Card className="mb-6"><CardHeader className="pb-2"><CardTitle className="text-lg">Observaciones (IA)</CardTitle></CardHeader><CardContent><ul className="text-sm list-disc pl-5 space-y-1">{insights.map((t,i)=>(<li key={i}>{t}</li>))}</ul></CardContent></Card>)}
{/* Tabs */}
{rows.length>0&&(<Tabs value={tab} onValueChange={setTab} className="w-full"><TabsList className="grid grid-cols-1 md:grid-cols-3 w-full"><TabsTrigger value="weekday">Comparativa por fecha</TabsTrigger><TabsTrigger value="dpmo">Day Part</TabsTrigger><TabsTrigger value="top">Top productos (mensual)</TabsTrigger></TabsList>
<TabsContent value="weekday"><Card className="mb-4"><CardHeader className="pb-2"><CardTitle className="text-lg">Comparativa por fecha y Revenue Center</CardTitle></CardHeader><CardContent>{rcList.length===0?(<div className="text-sm text-muted-foreground">No hay datos para el año seleccionado.</div>):(<div className="space-y-4"><div className="flex gap-2 items-center"><Label>Revenue Center</Label><select className="border rounded-xl px-3 py-2" value={rcSel||rcList[0]} onChange={e=>setRCSel(e.target.value)}>{rcList.map(rc=>(<option key={rc} value={rc}>{rc}</option>))}</select><Label>Location</Label><select className="border rounded-xl px-3 py-2" value={compLocSel} onChange={e=>setCompLocSel(e.target.value)}><option value="">Todos</option>{compLocList.map(l=>(<option key={l} value={l}>{l}</option>))}</select></div>
<div className="flex items-center gap-2"><Label>Línea</Label><select className="border rounded-xl px-2 py-1" value={lineMetric} onChange={e=>setLineMetric(e.target.value)}><option value="GIH">Guests In-House</option><option value="Occ">Occupancy %</option><option value="Covers">Covers</option></select></div>
<div className="grid grid-cols-1 gap-6"><div className="h-72"><ResponsiveContainer width="100%" height="100%"><BarChart data={dataChart} margin={{left:56,right:24,top:20,bottom:58}} barCategoryGap={12}><CartesianGrid strokeDasharray="3 3"/><XAxis dataKey="x" tick={<AxisTickJustDay/>} interval={0} height={40} tickMargin={8}/><YAxis/><RTooltip content={<TooltipCovers year={year} ly={ly}/>}/><Legend verticalAlign="bottom" height={36}/><Bar dataKey={`CV ${year}`} name={`Covers CY (${year})`} fill="#1e3a8a"/><Bar dataKey={`CV ${ly}`} name={`Covers LY (${ly})`} fill="#111827"/></BarChart></ResponsiveContainer></div>
<div className="h-72"><ResponsiveContainer width="100%" height="100%"><BarChart data={dataChart} margin={{left:64,right:24,top:20,bottom:58}} barCategoryGap={12}><CartesianGrid strokeDasharray="3 3"/><XAxis dataKey="x" tick={<AxisTickJustDay/>} interval={0} height={40} tickMargin={8}/><YAxis tickFormatter={v=>moneyFmt(v)}/><YAxis yAxisId="R" orientation="right" domain={lineMetric==='Occ'?[0,1]:[0,'dataMax']} tickFormatter={v=>lineMetric==='Occ'?nf(v*100,{maximumFractionDigits:1})+'%':nf(v)} /><RTooltip content={<TooltipSales year={year} ly={ly}/>}/><Legend verticalAlign="bottom" height={36}/><Bar dataKey={`SN ${year}`} name={`Ventas CY (${year})`} fill="#1e3a8a"/><Bar dataKey={`SN ${ly}`} name={`Ventas LY (${ly})`} fill="#111827"/><Line yAxisId="R" type="monotone" dataKey={d=>getLineVal(d,lineMetric)} name={lineName} stroke="#9ca3af" dot={false} strokeWidth={1}/></BarChart></ResponsiveContainer></div>
<div className="h-72"><ResponsiveContainer width="100%" height="100%"><BarChart data={dataChart} margin={{left:64,right:24,top:20,bottom:58}} barCategoryGap={12}><CartesianGrid strokeDasharray="3 3"/><XAxis dataKey="x" tick={<AxisTickJustDay/>} interval={0} height={40} tickMargin={8}/><YAxis tickFormatter={v=>moneyFmt(v)}/><RTooltip content={<TooltipAvg year={year} ly={ly}/>}/><Legend verticalAlign="bottom" height={36}/><Bar dataKey={`AC ${year}`} name={`Average Check CY (${year})`} fill="#1e3a8a"/><Bar dataKey={`AC ${ly}`} name={`Average Check LY (${ly})`} fill="#111827"/></BarChart></ResponsiveContainer></div>
</div><Separator className="my-2"/><VTable rows={sortedCompRows} cols={compCols} widthMap={W.comp} onSort={(k,d)=>setSortComp(k,d)} renderRow={r=>compCols.map(col=>(<td key={col} className={`px-3 py-1 ${numericCols.has(col)?"text-right":"text-left"} whitespace-nowrap overflow-hidden text-ellipsis`}>{col.includes("Date")?(r[col]?fmtShort(r[col]):"—"):numericCols.has(col)?(col.includes("%")?nf((r[col]||0)*100,{maximumFractionDigits:1})+"%":(col.startsWith("SN")||col.startsWith("Ventas")?moneyFmt(r[col]||0):nf(r[col]||0))):String(r[col]??"")}</td>))}/></div>)}</CardContent></Card></TabsContent>
<TabsContent value="dpmo"><Card><CardHeader className="pb-2"><CardTitle className="text-lg">Resumen por Day Part</CardTitle></CardHeader><CardContent><div className="flex gap-2 items-center mb-3"><Label>Revenue Center</Label><select className="border rounded-xl px-3 py-2" value={dpRCSel} onChange={e=>setDpRCSel(e.target.value)}><option value="">Todos</option>{allRC.map(rc=>(<option key={rc} value={rc}>{rc}</option>))}</select><Label>Location</Label><select className="border rounded-xl px-3 py-2" value={dpLocSel} onChange={e=>setDpLocSel(e.target.value)}><option value="">Todos</option>{allLoc.map(l=>(<option key={l} value={l}>{l}</option>))}</select></div>{dpData.groups.length===0?(<div className="text-sm text-muted-foreground">No hay datos para el año seleccionado.</div>):(<div className="overflow-auto rounded-xl border"><table className="table-fixed min-w-[1000px] text-sm"><Cols map={W.dpmo} cols={dpCols}/><thead className="bg-muted/50"><tr>{dpCols.map(col=>(<th key={col} className={`px-3 py-2 ${numericCols.has(col)?"text-right":"text-left"} whitespace-nowrap`}><div className="flex items-center gap-1"><span>{labelFor(col)}</span><div className="flex flex-col"><button type="button" className="p-0" onClick={()=>setSortDP(col,"asc")}><ChevronUp className="w-3 h-3"/></button><button type="button" className="p-0" onClick={()=>setSortDP(col,"desc")}><ChevronDown className="w-3 h-3"/></button></div></div></th>))}</tr></thead><tbody>{dpFlatRows.map((r,i)=>r.type==="group"?(<tr key={`g-${r.DayPart}-${i}`} className="border-t bg-muted/30 font-semibold"><td className="px-3 py-1"><button className="inline-flex items-center gap-1" onClick={()=>setOpenDP(s=>{const n=new Set(s);n.has(r.DayPart)?n.delete(r.DayPart):n.add(r.DayPart);return n})}>{openDP.has(r.DayPart)?<Minus className="w-4 h-4"/>:<Plus className="w-4 h-4"/>}{r.DayPart}</button></td><td className="px-3 py-1 text-left">Total</td><td className="px-3 py-1 text-right text-blue-800">{nf(r["SC TY"])}</td><td className="px-3 py-1 text-right">{nf(r["SC LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(r["SC Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf((r["SC Var %"]||0)*100,{maximumFractionDigits:1})}%</td><td className="px-3 py-1 text-right text-blue-800">{moneyFmt(r["SN TY"])}</td><td className="px-3 py-1 text-right">{moneyFmt(r["SN LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{moneyFmt(r["SN Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf((r["SN Var %"]||0)*100,{maximumFractionDigits:1})}%</td></tr>):(<tr key={`c-${r.DayPart}-${r.Type}-${i}`} className="border-t"><td className="px-3 py-1 text-left text-muted-foreground">{r.DayPart}</td><td className="px-3 py-1 text-left">{r.Type}</td><td className="px-3 py-1 text-right">{nf(r["SC TY"])}</td><td className="px-3 py-1 text-right">{nf(r["SC LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(r["SC Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf((r["SC Var %"]||0)*100,{maximumFractionDigits:1})}%</td><td className="px-3 py-1 text-right">{moneyFmt(r["SN TY"])}</td><td className="px-3 py-1 text-right">{moneyFmt(r["SN LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{moneyFmt(r["SN Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf((r["SN Var %"]||0)*100,{maximumFractionDigits:1})}%</td></tr>))}</tbody></table></div>)}</CardContent></Card></TabsContent>
<TabsContent value="top"><Card><CardHeader className="pb-2"><CardTitle className="text-lg">Top productos por mes (CY vs LY)</CardTitle></CardHeader><CardContent><div className="flex flex-wrap items-center gap-2 mb-4"><Label>Mes (CY)</Label><select className="border rounded-xl px-3 py-2" value={month??""} onChange={e=>setMonth(e.target.value)}>{monthsTY.map(m=>(<option key={m} value={m}>{m}</option>))}</select><Label>Revenue Center</Label><select className="border rounded-xl px-3 py-2" value={topRCSel} onChange={e=>setTopRCSel(e.target.value)}><option value="">Todos</option>{topRCList.map(rc=>(<option key={rc} value={rc}>{rc}</option>))}</select><Label>Location</Label><select className="border rounded-xl px-3 py-2" value={topLocSel} onChange={e=>setTopLocSel(e.target.value)}><option value="">Todos</option>{topLocList.map(l=>(<option key={l} value={l}>{l}</option>))}</select><Label>Categoría</Label><select className="border rounded-xl px-3 py-2" value={topCat} onChange={e=>setTopCat(e.target.value)}><option value="">Todos</option>{(["Food","Beverage","Other"]).filter(c=>catOptions.includes(c)).map(c=>(<option key={c} value={c}>{c}</option>))}</select><div className="relative"><Search className="w-4 h-4 absolute left-2 top-2.5 text-muted-foreground"/><input className="border rounded-xl pl-8 pr-3 py-2 text-sm" placeholder="Filtrar producto..." value={q} onChange={e=>setQ(e.target.value)}/></div></div><div className="mb-2"><Button size="sm" variant={pickMode?"secondary":"outline"} onClick={()=>setPickMode(v=>!v)}>{pickMode?"Cerrar selección":"Seleccionar productos"}</Button></div><div className="overflow-auto rounded-xl border p-1">{(()=>{const cols=pickMode?["Sel","Menu Item Name","Units TY","Units LY","Units Var","Units Var %","Ventas TY","Ventas LY","Ventas Var","Ventas Var %","CPU"]:["Menu Item Name","Units TY","Units LY","Units Var","Units Var %","Ventas TY","Ventas LY","Ventas Var","Ventas Var %","CPU"];return(<table className="table-fixed min-w-[1250px] text-sm"><Cols map={W.top} cols={cols}/><thead className="bg-muted/50"><tr>{cols.map(col=>(<th key={col} className={`px-3 py-2 ${numericCols.has(col)?"text-right":"text-left"} whitespace-nowrap`}>{col==="Sel"?(<span>Sel</span>):(<div className="flex items-center gap-1"><span>{labelFor(col)}</span><div className="flex flex-col"><button type="button" className="p-0" onClick={()=>setSortTop(col,"asc")}><ChevronUp className="w-3 h-3"/></button><button type="button" className="p-0" onClick={()=>setSortTop(col,"desc")}><ChevronDown className="w-3 h-3"/></button></div></div>)}</th>))}</tr></thead><tbody>{topSortedRows.map((r,i)=>{const k=keyTop(r),checked=selKeys.has(k);return(<tr key={i} className="border-t">{pickMode&&(<td className="px-3 py-1 text-center"><input type="checkbox" checked={checked} onChange={()=>toggleSel(k)}/></td>)}<td className="px-3 py-1 text-left whitespace-nowrap overflow-hidden text-ellipsis">{r["Menu Item Name"]}</td><td className="px-3 py-1 text-right text-blue-800 font-semibold">{nf(r["Units TY"])}</td><td className="px-3 py-1 text-right">{nf(r["Units LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(r["Units Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(r["Units Var %"]*100,{maximumFractionDigits:1})}%</td><td className="px-3 py-1 text-right text-blue-800 font-semibold">{moneyFmt(r["Ventas TY"])}</td><td className="px-3 py-1 text-right">{moneyFmt(r["Ventas LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{moneyFmt(r["Ventas Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(r["Ventas Var %"]*100,{maximumFractionDigits:1})}%</td><td className="px-3 py-1 text-right">{r.CPU?nf(r.CPU,{maximumFractionDigits:2}):"-"}</td></tr>)})}</tbody><tfoot className="bg-muted/30"><tr className="border-t font-semibold">{pickMode&&(<td className="px-3 py-1"/>)}<td className="px-3 py-1 text-left">Subtotal (visibles)</td><td className="px-3 py-1 text-right text-blue-800">{nf(topSubtotal["Units TY"])}</td><td className="px-3 py-1 text-right">{nf(topSubtotal["Units LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(topSubtotal["Units Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(topSubtotal["Units Var %"]*100,{maximumFractionDigits:1})}%</td><td className="px-3 py-1 text-right text-blue-800">{moneyFmt(topSubtotal["Ventas TY"])}</td><td className="px-3 py-1 text-right">{moneyFmt(topSubtotal["Ventas LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{moneyFmt(topSubtotal["Ventas Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(topSubtotal["Ventas Var %"]*100,{maximumFractionDigits:1})}%</td><td className="px-3 py-1"/></tr>{pickMode&&(<tr className="border-t"><td className="px-3 py-1"/><td className="px-3 py-1 text-left">Subtotal (seleccionados)</td><td className="px-3 py-1 text-right text-blue-800">{nf(topSelSubtotal["Units TY"])}</td><td className="px-3 py-1 text-right">{nf(topSelSubtotal["Units LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(topSelSubtotal["Units Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(topSelSubtotal["Units Var %"]*100,{maximumFractionDigits:1})}%</td><td className="px-3 py-1 text-right text-blue-800">{moneyFmt(topSelSubtotal["Ventas TY"])}</td><td className="px-3 py-1 text-right">{moneyFmt(topSelSubtotal["Ventas LY"])}</td><td className="px-3 py-1 text-right text-gray-500">{moneyFmt(topSelSubtotal["Ventas Var"])}</td><td className="px-3 py-1 text-right text-gray-500">{nf(topSelSubtotal["Ventas Var %"]*100,{maximumFractionDigits:1})}%</td><td className="px-3 py-1"/></tr>)}</tfoot></table>);})()}</div></CardContent></Card></TabsContent>
</Tabs>)}
<div className="text-xs text-muted-foreground mt-6">Notas: CY azul, LY negro. "Ventas" = Sales Net VAT after Discount. Comparativa por fecha usa -364 días (fallback -365). Eje derecho oculto para línea (escala dinámica). CPU=Units/Covers mensual. Avg Check = Ventas / Covers (día).</div>
{/* Tests en runtime (no intrusivos) */}{(()=>{console.assert(pct(110,100)===0.1,'pct');console.assert(monthKey('2025-08-01')==='2025-08','monthKey');const t=agg([{A:1,B:1,"Sales Count":2,"Sales Net VAT after Discount":10},{A:1,B:1,"Sales Count":3,"Sales Net VAT after Discount":5}],["A","B"]);console.assert(t[0]["Sales Count"]===5&&t[0]["Sales Net VAT after Discount"]===15,'agg');const map=new Map();[{"Revenue Center Name":"RC1","Business Date":"2025-01-01","Guests Count":10},{"Revenue Center Name":"RC1","Business Date":"2025-01-01","Guests Count":5},{"Revenue Center Name":"RC1","Business Date":"2025-01-02","Guests Count":7}].forEach(r=>{const k=`${r["Revenue Center Name"]}||${r["Business Date"]}`;map.set(k,(map.get(k)||0)+num(r["Guests Count"]))});console.assert(map.get('RC1||2025-01-01')===15&&map.get('RC1||2025-01-02')===7,'coversAgg');console.assert(Math.abs((50/100)-0.5)<1e-9,'cpu Units/Covers');
console.assert(mdKey('2025-01-15')==='01-15','mdKey');console.assert(inMDRange('01-15','01-01','01-31')===true,'range-simple');console.assert(inMDRange('12-20','12-15','01-10')===true,'range-wrap-a');console.assert(inMDRange('02-01','12-15','01-10')===true,'range-wrap-b');console.assert(inMDRange('01-11','12-15','01-10')===false,'range-wrap-out');const iso='2025-08-31';const base=addDaysISO(iso,-364);const sh=(DOW(iso)-DOW(base)+7)%7;console.assert(DOW(addDaysISO(base,sh))===DOW(iso),'same-weekday-shift');console.assert(mdKey('2024-12-31')==='12-31','mdKey2');console.assert(addDaysISO('2025-01-01',-365)==='2024-01-02','addDaysISO-365');console.assert(getLineVal({Occ:0.82},'Occ')===0.82,'line-occ');console.assert(getLineVal({'COV TY':45},'Covers')===45,'line-cov');console.assert(getLineVal({'Guests In-House':200},'GIH')===200,'line-gih');return null;})()}</div>)}
